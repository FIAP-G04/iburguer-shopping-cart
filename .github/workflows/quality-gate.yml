name: SonarCloud
on:
  push:
    branches:
    - main
  pull_request:
    types: [opened, synchronize, reopened]
jobs:
  build:
    name: Build and analyze
    runs-on: windows-latest
    steps:
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: 17
        distribution: 'zulu' # Alternative distribution options are available.
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0 # Shallow clones should be disabled for a better relevancy of analysis
    - name: Cache SonarCloud packages
      uses: actions/cache@v3
      with:
        path: ~\sonar\cache
        key: ${{ runner.os }}-sonar
        restore-keys: ${{ runner.os }}-sonar
    - name: Cache SonarCloud scanner
      id: cache-sonar-scanner
      uses: actions/cache@v3
      with:
        path: .\.sonar\scanner
        key: ${{ runner.os }}-sonar-scanner
        restore-keys: ${{ runner.os }}-sonar-scanner
    - name: Install SonarCloud scanner
      if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
      shell: powershell
      run: |
        New-Item -Path .\.sonar\scanner -ItemType Directory
        dotnet tool update dotnet-sonarscanner --tool-path .\.sonar\scanner
    - name: Build and analyze
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        ROOT_PROJECT_DIRECTORY: src
        PROJECT_NAME: iBurguer.ShoppingCart.API
      shell: powershell
      run: |
        .\.sonar\scanner\dotnet-sonarscanner begin /k:"FIAP-G04_iburguer-shopping-cart" /o:"fiap-g04" /d:sonar.token="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io"
        dotnet restore ${{ env.ROOT_PROJECT_DIRECTORY}}/${{ env.PROJECT_NAME}}
        dotnet build ${{ env.ROOT_PROJECT_DIRECTORY}}/${{ env.PROJECT_NAME}} --no-restore --configuration Release
        .\.sonar\scanner\dotnet-sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"

  deploy:
    runs-on: ubuntu-latest
    #needs: build

    env:
      IMAGE_NAME: iburguer-shopping-cart
      ROOT_PROJECT_DIRECTORY: src
      PROJECT_NAME: iBurguer.ShoppingCart.API
      AWS_EKS_CLUSTER_NAME: iburguer-iburguer-cluster
      AWS_REGION: us-east-1

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Get next version
        uses: reecetech/version-increment@2023.9.3
        id: version
        with:
            scheme: semver
            increment: patch

      - name: Build and Push Docker Image
        run: |
            docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }} ${{ env.ROOT_PROJECT_DIRECTORY}} --file ${{ env.ROOT_PROJECT_DIRECTORY}}/${{ env.PROJECT_NAME}}/Dockerfile
            docker push ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }}
        env:
            DOCKER_BUILDKIT: 1

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Create Kubeconfig
        run: |
          aws eks update-kubeconfig --name ${{ env.AWS_EKS_CLUSTER_NAME }} --region ${{ env.AWS_REGION }}

      - name: Create Helm Template
        uses: koslib/helm-eks-action@master
        env:
          KUBE_CONFIG_DATA: ${{ env.KUBE_CONFIG_DATA }}
        with:
          command: |
            helm version
            kubectl version
            kubectl cluster-info
            helm template iburguer --set configmap.redis.password=${{ secrets.DATABASE_PASSWORD }} --set configmap.redis.connectionString=${{ secrets.REDIS_HOST }} ./chart > k8s/artifacts.yaml

      - name: Deploy to EKS
        run: |
          kubectl apply --validate=false -f k8s/artifacts.yaml